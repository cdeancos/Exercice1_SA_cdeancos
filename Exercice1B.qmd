---
title: "Exercice_1B_STA426_cdeancos"
author: "cdeancos"
format: html
editor: visual
---
## Exercice 1B
#### 0. Importing necessary libraries and setting a random seed for reproducibility

```{r}
# Load the ggplot2 library
library(ggplot2)

# Random seed (reproducibility)
set.seed(123)
```

## 1. Random Sampling

First we generate 100 random values from a **log-normal distribution** *(rlnorm)*. I assumed from the exercise sheet that *mu = 5* was the value of the *mean-log* and *sigma = 0.5* the value of the *standard-deviation-log*.

```{r}
# Parameters for the log-normal distribution
mu <- 5
sigma <- 0.5

# 100 random values from the log-normal distribution
sampled_values <- rlnorm(100, meanlog = mu, sdlog = sigma)
```

## 2. Mean and Standard Deviation of the 100 random samples

The mean and standard deviation of the 100 random samples are respectively: `r mean(sampled_values)` and `r sd(sampled_values)` .

## 3. Histogram of the sampled data

Histograms are done using the ggplot2 library. We will respectively plot the histograms in linear and log scale.

The sampled values are transformed into a data frame (as needed in the ggplot function).

```{r}
# Create a data frame with the sampled values
random_data <- data.frame(values = sampled_values)
```

#### 3.a Linear plot

```{r}
# Histogram on the linear scale
linear_plot <- ggplot(random_data, aes(x = values)) +
  geom_histogram(binwidth = 0.2, fill = "green", color = "black") +
  labs(title = "Histogram (Linear Scale)", x = "Values", y = "Frequency")

# Display linear plot
print(linear_plot)
```

#### 3.b Log plot

The *scale_x\_log10()* function allows to transform the values of the x axis into a logarithmic scale (base 10).

```{r}
# Histogram on the log scale
log_plot <- ggplot(random_data, aes(x = values)) +
  geom_histogram(binwidth = 0.2, fill = "pink", color = "black") +
  labs(title = "Histogram (Log Scale)", x = "Values", y = "Frequency") +
  scale_x_log10()

# Display log plot
print(log_plot)
```

## 4. Violin plot of the sampled data

Violin plot of the random samples done with ggplot and geom_violin function.

```{r}
# Violin plot
violin_plot <- ggplot(random_data, aes(x = "", y = values)) +
  geom_violin(fill = "dark green", color = "black") +
  labs(title = "Violin Plot of Sampled Data",x="", y = "Values") 

# Display the violin plot
print(violin_plot)
```
